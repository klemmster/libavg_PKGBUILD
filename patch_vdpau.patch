--- src/video/VDPAU.cpp	2012-07-16 00:49:03.493377302 +0200
+++ src/video/VDPAU.cpp	2012-07-16 01:12:21.661389030 +0200
@@ -1,5 +1,5 @@
 //
-//  libavg - Media Playback Engine.
+//  libavg - Media Playback Engine.
 //  Copyright (C) 2003-2011 Ulrich von Zadow
 //
 //  This library is free software; you can redistribute it and/or
@@ -19,7 +19,6 @@
 //  Current versions can be found at www.libavg.de
 //
 #include "VDPAU.h"
-#include "FrameAge.h"
 #include "AVCCOpaque.h"
 #include "../base/Exception.h"
 #include <iostream>
@@ -127,7 +126,7 @@
             (void**)&vdp_output_surface_destroy);
     safeGetProcAddress(VDP_FUNC_ID_OUTPUT_SURFACE_GET_BITS_NATIVE,
             (void**)&vdp_output_surface_get_bits_native);
-    safeGetProcAddress(VDP_FUNC_ID_VIDEO_SURFACE_CREATE,
+    safeGetProcAddress(VDP_FUNC_ID_VIDEO_SURFACE_CREATE,
             (void**)&vdp_video_surface_create);
     safeGetProcAddress(VDP_FUNC_ID_VIDEO_SURFACE_DESTROY,
             (void**)&vdp_video_surface_destroy);
@@ -142,19 +141,19 @@
             (void**)&vdp_video_mixer_destroy);
     safeGetProcAddress(VDP_FUNC_ID_VIDEO_MIXER_RENDER,
             (void**)&vdp_video_mixer_render);
-    safeGetProcAddress(VDP_FUNC_ID_PRESENTATION_QUEUE_CREATE,
+    safeGetProcAddress(VDP_FUNC_ID_PRESENTATION_QUEUE_CREATE,
             (void**)&vdp_presentation_queue_create);
-    safeGetProcAddress(VDP_FUNC_ID_PRESENTATION_QUEUE_DESTROY,
+    safeGetProcAddress(VDP_FUNC_ID_PRESENTATION_QUEUE_DESTROY,
             (void**)&vdp_presentation_queue_destroy);
     safeGetProcAddress(VDP_FUNC_ID_PRESENTATION_QUEUE_TARGET_CREATE_X11,
             (void**)&vdp_presentation_queue_target_create_x11);
-    safeGetProcAddress(VDP_FUNC_ID_PRESENTATION_QUEUE_QUERY_SURFACE_STATUS,
+    safeGetProcAddress(VDP_FUNC_ID_PRESENTATION_QUEUE_QUERY_SURFACE_STATUS,
             (void**)&vdp_presentation_queue_query_surface_status);
     safeGetProcAddress(VDP_FUNC_ID_PRESENTATION_QUEUE_DISPLAY,
             (void**)&vdp_presentation_queue_display);
     safeGetProcAddress(VDP_FUNC_ID_PRESENTATION_QUEUE_GET_TIME,
             (void**)&vdp_presentation_queue_get_time);
-    safeGetProcAddress(VDP_FUNC_ID_PRESENTATION_QUEUE_BLOCK_UNTIL_SURFACE_IDLE,
+    safeGetProcAddress(VDP_FUNC_ID_PRESENTATION_QUEUE_BLOCK_UNTIL_SURFACE_IDLE,
             (void**)&vdp_presentation_queue_block_until_surface_idle);
     safeGetProcAddress(VDP_FUNC_ID_VIDEO_SURFACE_GET_PARAMETERS,
             (void**)&vdp_video_surface_get_parameters);
@@ -218,12 +217,11 @@
     return pCodec;
 }

-int VDPAU::getBuffer(AVCodecContext* pContext, AVFrame* pFrame)
+int VDPAU::getBuffer(AVCodecContext* pContext, AVFrame* pFrame)
 {
     AVCCOpaque* pOpaque = (AVCCOpaque*)pContext->opaque;
-    FrameAge* pAge = pOpaque->getFrameAge();
     VDPAU* pVDPAU = pOpaque->getVDPAU();
-    return pVDPAU->getBufferInternal(pContext, pFrame, pAge);
+    return pVDPAU->getBufferInternal(pContext, pFrame);
 }

 int VDPAU::getFreeSurfaceIndex()
@@ -238,28 +236,16 @@
     return -1;
 }

-int VDPAU::getBufferInternal(AVCodecContext* pContext, AVFrame* pFrame,
-        FrameAge* pAge)
+int VDPAU::getBufferInternal(AVCodecContext* pContext, AVFrame* pFrame)
 {
     VdpStatus status;
     int surfaceIndex = getFreeSurfaceIndex();
-
+
     VideoSurface* pVideoSurface = &m_VideoSurfaces[surfaceIndex];
     vdpau_render_state* pRenderState = &pVideoSurface->m_RenderState;
     pFrame->data[0] = (uint8_t*)pRenderState;
     pFrame->type = FF_BUFFER_TYPE_USER;

-    if (pFrame->reference) { //I-P frame
-        pFrame->age = pAge->m_IPAge0;
-        pAge->m_IPAge0 = pAge->m_IPAge1;
-        pAge->m_IPAge1 = 1;
-        pAge->m_Age++;
-    } else {
-        pFrame->age = pAge->m_Age;
-        pAge->m_IPAge0++;
-        pAge->m_IPAge1++;
-        pAge->m_Age = 1;
-    }
     pRenderState->state |= FF_VDPAU_STATE_USED_FOR_REFERENCE;

     if (pVideoSurface->m_Size.x != pContext->width ||
@@ -345,7 +331,7 @@
             status = vdp_video_mixer_destroy(m_VDPMixer);
             AVG_ASSERT(status == VDP_STATUS_OK);
             m_VDPMixer = VDP_INVALID_HANDLE;
-        }
+        }
         if (m_VDPDecoder != VDP_INVALID_HANDLE) {
             status = vdp_decoder_destroy(m_VDPDecoder);
             AVG_ASSERT(status == VDP_STATUS_OK);
@@ -354,7 +340,7 @@
         status = vdp_decoder_create(s_VDPDevice, profile, size.x, size.y, 16,
                 &m_VDPDecoder);
         AVG_ASSERT(status == VDP_STATUS_OK);
-
+
         m_PixFmt = pContext->pix_fmt;
         m_Size = size;

@@ -362,7 +348,7 @@
             VDP_VIDEO_MIXER_FEATURE_DEINTERLACE_TEMPORAL,
             VDP_VIDEO_MIXER_FEATURE_DEINTERLACE_TEMPORAL_SPATIAL,
         };
-        VdpVideoMixerParameter params[] = {
+        VdpVideoMixerParameter params[] = {
              VDP_VIDEO_MIXER_PARAMETER_VIDEO_SURFACE_WIDTH,
              VDP_VIDEO_MIXER_PARAMETER_VIDEO_SURFACE_HEIGHT,
              VDP_VIDEO_MIXER_PARAMETER_CHROMA_TYPE,
--- src/video/VDPAU.h	2012-07-16 00:49:03.501377302 +0200
+++ src/video/VDPAU.h	2012-07-16 01:10:55.768388312 +0200
@@ -1,5 +1,5 @@
 //
-//  libavg - Media Playback Engine.
+//  libavg - Media Playback Engine.
 //  Copyright (C) 2003-2011 Ulrich von Zadow
 //
 //  This library is free software; you can redistribute it and/or
@@ -36,7 +36,6 @@

 #define N_VIDEO_SURFACES 64

-struct FrameAge;

 struct VideoSurface
 {
@@ -90,9 +89,9 @@
     static bool staticInit();
     static int getBuffer(AVCodecContext* pContext, AVFrame* pFrame);
     int getFreeSurfaceIndex();
-    int getBufferInternal(AVCodecContext* pContext, AVFrame* pFrame, FrameAge* pAge);
+    int getBufferInternal(AVCodecContext* pContext, AVFrame* pFrame);
     static void releaseBuffer(struct AVCodecContext* pContext, AVFrame* pFrame);
-    static void drawHorizBand(AVCodecContext* pContext, const AVFrame* pFrame,
+    static void drawHorizBand(AVCodecContext* pContext, const AVFrame* pFrame,
             int offset[4], int y, int type, int height);
     static ::PixelFormat getFormat(AVCodecContext* pContext, const ::PixelFormat* pFmt);
     void render(AVCodecContext* pContext, const AVFrame* pFrame);
